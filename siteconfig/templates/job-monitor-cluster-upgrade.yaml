apiVersion: batch/v1
kind: Job
metadata:
  name: job-monitor-cluster-upgrade
  namespace: ztp-group
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  template:
    spec:
      containers:
      - command:
          - /bin/bash
          - "-c"
          - |
                /bin/bash <<'EOF'
                # Script to monitor cluster upgrade using TALM (Topology-Aware Lifecycle Management)
                # Author: Federico 'tele' Rossi <ferossi@redhat.com>
                #
                function logc() {
                    txt=$1
                    echo -e "[`date '+%m-%d-%Y %H:%M:%S'`] $txt" 
                }
   
                # the managedclusterview is used to monitor the detailed cluster progress
                function create_managed_view() {
                   cr=$1
                   logc "Create ManagedClusterView for $cr"
                   echo -e "apiVersion: view.open-cluster-management.io/v1beta1\nkind: ManagedClusterView\nmetadata:\n   name: upgrade-view\n   namespace: ${cr}\nspec:\n   scope:\n      apiGroup: config.openshift.io\n      kind: ClusterVersion\n      name: version\n      resource: clusterversions.config.openshift.io" | oc apply -f -
                }

                function create_cgus() {
                   ns=$1
                   logc "Create ClusterGroupUpgrade resources"
                   echo -e "apiVersion: ran.openshift.io/v1alpha1\nkind: ClusterGroupUpgrade\nmetadata:\n  name: cgu-platform-upgrade-${ns}\n  namespace: ztp-group\nspec:\n  managedPolicies:\n  - du-upgrade-${ns}-platform-upgrade\n  preCaching: false\n  backup: false\n  clusters:\n  - $ns\n  remediationStrategy:\n    maxConcurrency: 1\n  enable: false" | oc apply -f -
                   echo -e "apiVersion: ran.openshift.io/v1alpha1\nkind: ClusterGroupUpgrade\nmetadata:\n  name: cgu-platform-upgrade-prep-${ns}\n  namespace: ztp-group\nspec:\n  managedPolicies:\n  - du-upgrade-${ns}-platform-upgrade-prep\n  clusters:\n  - $ns\n  remediationStrategy:\n    maxConcurrency: 1\n  enable: true" | oc apply -f -
                }

                function get_cgu_name() {
                  ct=0
                  while [[ $ct -le 10 ]]; do
                     CGU_TMP_NAME=`oc get clustergroupupgrade -n ztp-group --sort-by=.metadata.creationTimestamp | tail -1 | awk '{print $1}'`
                     if [ ! -z "$CGU_TMP_NAME" ]; then
                        echo $CGU_TMP_NAME
                        break
                     fi

                     sleep 10
                     ct=$(($ct+1))
                  done
                }

                function get_clustertype() {
                   ns=$1     
                   logc "Check sno or compact"
                   if (oc get agentclusterinstalls.extensions.hive.openshift.io ${ns} -n ${ns} -o=jsonpath='{.spec.provisionRequirements.controlPlaneAgents}' | grep 3 ); then
                     logc "cluster is COMPACT"
                     CLUSTER_TYPE="COMPACT"
                     CONDITION_INDEX=0
                   else
                     logc "cluster is SNO"
                     CLUSTER_TYPE="SNO"
                     CONDITION_INDEX=1
                   fi 
                }

 
                logc "START Cluster upgrade monitor"
                logc "============================="
                CLUSTER_UPGRADE_START_TIME=`date +%s`

                logc "Adding label"
                NS=`oc get sa -o=jsonpath='{.items[0]..metadata.namespace}'`
                oc label managedcluster $NS upgrade=yes --overwrite
                sleep 20

                get_clustertype $NS

                # First step we check if the CGU for the cluster is already in place
                NS=`oc get sa -o=jsonpath='{.items[0]..metadata.namespace}'`
                if (oc get cgu -n ztp-group | grep $NS); then
                   logc "CGU for $NS already exists"
                   logc "Delete upgrade cgu if there is any"
                   logc "Delete cgu"
                     oc delete cgu cgu-platform-upgrade-$NS -n ztp-group
                     oc delete cgu cgu-platform-upgrade-prep-$NS -n ztp-group
                   logc "Create new CGUs"
                     create_cgus $NS                     
                else
                   logc "CGU for $NS does not exist"
                   create_cgus $NS
                fi

                logc "Start monitoring CGU"
                logc "Get latest CGU..."
                # CGU_NAME=`get_cgu_name $NS`
                # mabe ... tmp patch
                CGU_NAME=cgu-platform-upgrade-prep-$NS
                logc "CGU NAME is: $CGU_NAME"
                # First is the cluster prep to update the ClusterVersion for upgrade
                ct=0
                while [[ $ct -le 20 ]]; do
                   CGU_STATUS=`oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions[0].status}'`
                   CGU_MESSAGE=`oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions[0].message}'`
                   CGU_REASON=`oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions[0].reason}'`
                   logc "CGU_STATUS[$CGU_STATUS] CGU_MESSAGE[$CGU_MESSAGE] CGU_REASON[$CGU_REASON]"

                   if [[ "$CGU_REASON" == "UpgradeCannotStart" ]]; then
                      logc "CGU not ready: $CGU_MESSAGE"
                   elif [[ "$CGU_REASON" == "UpgradeNotCompleted" ]]; then
                      logc "CGU ready for new patched CGU"
                      oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions[0]}'
                      echo
                      # mabe
                      # break
                   elif [[ "$CGU_REASON" == "UpgradeCompleted" ]]; then
                      logc "CGU ready to move to bakup process"
                      oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions[0]}'
                      echo
                      break
                   fi
 
                   sleep 10
                   ct=$(($ct+1))
                done
                
                # Deploy CGU to trigger the upgrade
                logc "Deploy CGU to trigger the backup"
                logc "Only if it is SNO"
                if [[ "$CLUSTER_TYPE" == "SNO" ]]; then
                  logc "Enalbe backup"
                  oc get clustergroupupgrade $CGU_NAME -n ztp-group -o yaml | sed '/^  uid: /d; /^  resourceVersion: /d; /^  creationTimestamp: /d; /^  selfLink: /d; /^status:$/Q; /^  finalizers: /d;' | grep -v finalizer | sed 's/platform-upgrade-prep/platform-upgrade/g' | grep -v 'generation:' | grep -v annotations | grep -v last-applied-config | sed -e 's/backup: false/backup: true/g' | sed -e 's/enable: true/enable: false/g' | oc apply -f -
                else
                   logc "Not enable backup as this is COMPACT"
                fi

                logc "CGU created: "
                oc get clustergroupupgrade cgu-platform-upgrade-$NS -n ztp-group -o yaml
                
                # CGU_NAME=`get_cgu_name`
                # mabe ... tmp patch
                CGU_NAME=cgu-platform-upgrade-$NS

                # Monitor backup and CGU readiness during upgrade
                logc "Monitor backup and CGU readiness during upgrade: "
                if [[ "$CLUSTER_TYPE" == "SNO" ]]; then
                  logc "CLUSTE_TYPE is SNO, goes to backup routine"

                  ct=0
                  while [[ $ct -le 5 ]]; do

                     # get upgrade type and status
                     CGU_STATUS=`oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions[0].status}'`
                     CGU_TYPE=`oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions[0].type}'`
                  
                     # the first type should be backup completed 
                     if [[ "$CGU_TYPE" == "BackupDone" ]]; then
                        case $CGU_STATUS in
                           False)
                              logc "Backup not completed: "
                              oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions[0]}'
                              echo
                              ;;

                           True)
                              logc "Backup completed: "
                              oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions[0]}'
                              echo
                              BACKUP_STATUS=1
                              ;;

                           *)
                              logc "Backup status unknown: "
                              oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions[0]}'
                              echo
                              thout ;;
                        esac
                     
                        if [[ $BACKUP_STATUS -eq 1 ]]; then
                           logc "Backup successfull ready for cluster upgrade"
                           break;
                        fi
                     fi 
                     # wait 3 minutes before checking CGU status
                     logc "Waiting to check cluster backup status.."
                     sleep 90
                     ct=$(($ct+1))
                  done
                else
                  logc "CLUSTER TYPE is COMPACT, bypass talm backup"
                fi


                logc "Patch CGU to trigger upgrade process: "
                oc patch clustergroupupgrade $CGU_NAME -n ztp-group --patch '{"spec":{"enable":true, "preCaching": false}}' --type=merge

                logc "Monitor upgrade progress"
                ct=0
                while [[ $ct -le 80 ]]; do
                  # get upgrade type and status
                  CGU_STATUS=`oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions['$CONDITION_INDEX'].status}'`
                  CGU_TYPE=`oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions['$CONDITION_INDEX'].type}'`
                     
                  CGU_TMP_CLUSTERS=`oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.backup.clusters}'`
                  TMP_C=`echo $CGU_TMP_CLUSTERS | tr -d '[' | tr -d ']' | tr -d '"'`
                  IFS=',' read -r -a CGU_CLUSTERS <<< $TMP_C
  
                  if [[ "$CGU_TYPE" == "Ready" ]]; then
                     case $CGU_STATUS in
                        True)
                           logc "ClusterGroupUpgrade compliant"
                           oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions['$CONDITION_INDEX']}'
                           echo
                           break
                           ;;
                        False)
                           logc "ClusterGroupUpgrade: "
                           oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions['$CONDITION_INDEX']}'
                           echo
                           logc "Get clusters remediation status"
                           # for CURR_CLUSTER in "${CGU_CLUSTERS}"; do
                           # mabe workaround
                           for CURR_CLUSTER in "$NS"; do
                              # if managed view doesn't exist create it
                              if ! ( oc get managedclusterview upgrade-view -n $CURR_CLUSTER > /dev/null); then
                                create_managed_view $CURR_CLUSTER
                              fi
                              echo "moto debug"
                              echo $NS
                              echo $CURR_CLUSTER

                              CLUSTER_STATUS=`oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath="{.status.status.currentBatchRemediationProgress.$CURR_CLUSTER.state}"`
                              
                              logc "Cluster $CURR_CLUSTER remediation status: $CLUSTER_STATUS";
                              # cluster is upgrading get detailed status
                              oc get managedclusterview upgrade-view -n $CURR_CLUSTER -o jsonpath='{.status.result.status.conditions[*]}' | tr ',' '\n' | grep -B 5 Progressing | grep message
                              echo
                           done
                           ;;
                        *)
                           logc "ClusterGroupUpgrade status is unknown: "
                           oc get clustergroupupgrade $CGU_NAME -n ztp-group -o jsonpath='{.status.conditions}'
                           echo
                           ;;
                     esac
                  fi
                       
                  # wait 3 minutes before checking CGU status
                  logc "Waiting to check cluster upgrade status.."
                  sleep 90
                  ct=$(($ct+1))
                done

                logc "============================="
    
                CLUSTER_UPGRADE_END_TIME=`date +%s`
                logc "CLUSTER_UPGRADE_START_TIME: `date -d @${CLUSTER_UPGRADE_START_TIME} '+%m-%d-%Y %H:%M:%S'`"
                logc "CLUSTER_UPGRADE_END_TIME: `date -d @${CLUSTER_UPGRADE_END_TIME} '+%m-%d-%Y %H:%M:%S'`"

                CLUSTER_UPGRADE_TOTAL_TIME=`echo $(( $CLUSTER_UPGRADE_END_TIME - $CLUSTER_UPGRADE_START_TIME )) | awk '{printf "%d:%02d:%02d", $1/3600, ($1/60)%60, $1%60}'`
                logc "END Cluster upgrade time: $CLUSTER_UPGRADE_TOTAL_TIME"

                # notify upgrade completed
                RESP_START_TIME=`date -d @${CLUSTER_UPGRADE_START_TIME} '+%m-%d-%Y %H:%M:%S'`
                RESP_END_TIME=`date -d @${CLUSTER_UPGRADE_END_TIME} '+%m-%d-%Y %H:%M:%S'`

                REQUEST_ID=`oc get configmap request-ztp -n $CGU_CLUSTERS -o jsonpath='{.data.requestid}'`
                logc "Request ID: $REQUEST_ID"

                curl -v -X POST -H 'Content-Type: application/json' -d "{\"type\": \"CLUSTER_UPDATE_REPLY\", \"cluster\": \"$CGU_CLUSTERS\", \"request_id\": \"$REQUEST_ID\", \"start_time\": \"$RESP_START_TIME\", \"end_time\": \"$RESP_END_TIME\", \"duration\": \"$CLUSTER_UPGRADE_TOTAL_TIME\", \"state\": \"SUCCESS\", \"reason\": \"\"}" http://ztpintegration-amqexample.apps.ztphub.lab.example.com/ztp

                EOF
        name: monitor-cluster-upgrade
        image: quay.lab.example.com:8443/library/ose-cli
      restartPolicy: Never

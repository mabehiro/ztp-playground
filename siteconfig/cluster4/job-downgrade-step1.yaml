apiVersion: batch/v1
kind: Job
metadata:
  name: job-downgrade-step1
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  template:
    spec:
      containers:
      - command:
          - /bin/bash
          - "-c"
          - |
                /bin/bash <<'EOF'
                # Script used for backup/provisioning/restore on downgrade flow or node replacement flow.
                # Author: Federico 'tele' Rossi <ferossi@redhat.com>

                function logc() {
                    txt=$1
                    echo -e "[`date '+%m-%d-%Y %H:%M:%S'`] $txt" 
                }
         
                function create_managed_view_backup() {
                   cr=$1
                   echo -e "apiVersion: view.open-cluster-management.io/v1beta1\nkind: ManagedClusterView\nmetadata:\n   name: backup-${cr}-view\n   namespace: ${cr}\nspec:\n   scope:\n      apiGroup: velero.io\n      kind: Backup\n      name: backup-${NEWNAME}\n      namespace: openshift-adp\n      resource: backups.velero.io" | oc apply -f -
                }

                function create_managed_action_backup() {
                   cr=$1
                   echo -e "apiVersion: action.open-cluster-management.io/v1beta1\nkind: ManagedClusterAction\nmetadata:\n   name: backup-${cr}-workload\n   namespace: ${cr}\nspec:\n  actionType: Create\n  kube:\n    resources: backups.velero.io\n    name: backup-${NEWNAME}\n    template:\n        apiVersion: velero.io/v1\n        kind: Backup\n        metadata:\n          labels:\n             velero.io/storage-location: example-dpa-1\n          name: backup-${NEWNAME}\n          namespace: openshift-adp\n        spec:\n          defaultVolumestoRestic: false\n          hooks: {}\n          includedNamespaces:\n          - workload\n          metadata: {}\n          storageLocation: example-dpa-1" | oc apply -f -
                }

                function create_managed_action_restore() {
                   cr=$1
                   echo -e "apiVersion: action.open-cluster-management.io/v1beta1\nkind: ManagedClusterAction\nmetadata:\n   name: restore-${cr}-workload\n   namespace: ${cr}\nspec:\n   actionType: Create\n   kube:\n      resource: restores.velero.io\n      name: restore-${NEWNAME}\n      template:\n        apiVersion: velero.io/v1\n        kind: Restore\n        metadata:\n           name: restore-${NEWNAME}\n           namespace: openshift-adp\n        spec:\n           backupName: backup-${NEWNAME}\n           excludedResources:\n           - nodes\n           - events\n           - events.events.k8s.io\n           - backups.velero.io\n           - restores.velero.io\n           - resticrepositories.velero.io\n           includedNamespaces:\n           - workload" | oc apply -f -
                }
 
                function create_managed_view_restore() {
                   cr=$1
                   echo -e "apiVersion: view.open-cluster-management.io/v1beta1\nkind: ManagedClusterView\nmetadata:\n   name: restore-${cr}-view\n   namespace: ${cr}\nspec:\n   scope:\n      apiGroup: velero.io\n      kind: Restore\n      name: restore-${NEWNAME}\n      namespace: openshift-adp\n      resource: restores.velero.io" | oc apply -f -
                }

                logc "START Backup"
                logc "============================="
                CLUSTER_BACKUP_START_TIME=`date +%s`
   
                NS=`oc get sa -o jsonpath='{.items[0]..metadata.namespace}'`
                PRE=`date +%Y-%m-%d`
                NEWNAME=$NS-$PRE
        
                logc "Create ManagedClusterAction Backup for $NS"
                create_managed_action_backup $NS
                logc "Create ManagedClusterView for Backup"
                create_managed_view_backup $NS                
                logc "Monitor backup status"

                ct=0
                BKP_CHECK=0
                while [[ $ct -le 20 ]]; do
                   BKP_STATUS=`oc get managedclusterview backup-${NS}-view -n ${NS} -o jsonpath='{.status.result.status.phase}'`

                   if [[ "$BKP_STATUS" == "Failed" ]]; then
                      logc "Backup failed:"
                      oc get managedclusterview backup-${NS}-view -n ${NS} -o jsonpath='{.status.result.status}'
                      echo
                      BKP_CHECK=1
                      break
                   elif [[ "$BKP_STATUS" == "Completed" ]]; then
                      logc "Backup successfully completed: "
                      oc get managedclusterview backup-${NS}-view -n ${NS} -o jsonpath='{.status.result.status}'
                      echo
                      break
                   elif [[ "$BKP_STATUS" == "InProgress" ]]; then
                      logc "Backup is in progress..."
                   else
                      logc "Backup status unknown: "
                      oc get managedclusterview backup-${NS}-view -n ${NS} -o jsonpath='{.status.result.status}'   
                      echo
                   fi
 
                   sleep 10
                   ct=$(($ct+1))
                done
                
                CLUSTER_BACKUP_END_TIME=`date +%s`

                if [[ $BKP_CHECK -eq 1 ]]; then
                   logc "Backup failed, interrupt process"
                   logc "Notify failure" 

                   CLUSTER_TOTAL_TIME=`echo $(( $CLUSTER_BACKUP_START_TIME - $CLUSTER_BACKUP_END_TIME )) | awk '{printf "%d:%02d:%02d", $1/3600, ($1/60)%60, $1%60}'`
                   RESP_START_TIME=`date -d @$CLUSTER_BACKUP_START_TIME '+%m-%d-%Y %H:%M:%S'`
                   RESP_END_TIME=`date -d @CLUSTER_BACKUP_END_TIME '+%m-%d-%Y %H:%M:%S'`
                  
                   # get request id
                   REQUEST_ID=`oc get configmap request-ztp -o jsonpath='{.data.requestid}'`

                   curl -v -X POST -H 'Content-Type: application/json' -d "{\"type\": \"CLUSTER_DOWNGRADE_REPLY\", \"cluster_name\": \"$NS\", \"start_time\": \"$RESP_START_TIME\", \"end_time\": \"$RESP_END_TIME\", \"duration\": \"$CLUSTER_TOTAL_TIME\", \"state\": \"FAILED\", \"reason\": \"\"}" http://ztpintegration-amqexample.apps.ztphub.lab.example.com/ztp
                   exit 1                  
                fi

                # delete ACI
                logc "Current AgentClusterInstall: "
                oc get agentclusterinstall -n $NS
                logc "Delete AgentClusterInstall: "
                oc get agentclusterinstall -n $NS | grep -v NAME | awk '{print $1}' | xargs oc delete agentclusterinstall -n $NS
                
                # save timing on configmap
                logc "Create configmap with timing"
                oc create configmap backup-timing --from-literal CLUSTER_BACKUP_START_TIME="$CLUSTER_BACKUP_START_TIME" --from-literal CLUSTER_BACKUP_END_TIME="$CLUSTER_BACKUP_END_TIME"
                
                logc "Finish Downgrade Step 1"

                EOF
        name: downgrade-step1
        image: quay.lab.example.com:8443/library/ose-cli
      restartPolicy: Never
